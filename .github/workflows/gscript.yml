name: Issue and PR Actionss

on:
  issues:
    types: [closed]
  pull_request:
    types: [opened]

jobs:
  congratulate-first-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Congratulate First PR
        uses: actions/github-script@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pullNumber = context.payload.number;
            const author = context.payload.pull_request.user.login;
            const octokit = new github.GitHub(process.env.GITHUB_TOKEN);
            const response = await octokit.search.issuesAndPullRequests({
              q: `type:pr+is:merged+author:${author}+repo:${owner}/${repo}`
            });
            if (response.data.total_count === 0) {
              const comment = 'Congratulations on opening your first pull request! :tada:';
              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: pullNumber,
                body: comment
              });
            }

  comment-on-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    steps:
      - name: Comment on Issue
        uses: actions/github-script@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const octokit = new github.GitHub(process.env.GITHUB_TOKEN);
            const comment = 'The issue is now resolved.';
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: issueNumber,
              body: comment
            });
